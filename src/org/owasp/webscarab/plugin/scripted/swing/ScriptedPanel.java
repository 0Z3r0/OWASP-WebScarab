/*
 * ScriptedPanel.java
 *
 * Created on 03 January 2005, 07:44
 */

package org.owasp.webscarab.plugin.scripted.swing;

import org.owasp.webscarab.plugin.scripted.Scripted;
import org.owasp.webscarab.plugin.scripted.ScriptedUI;

import org.owasp.webscarab.ui.swing.SwingPluginUI;
import org.owasp.webscarab.util.swing.ColumnDataModel;
import org.owasp.webscarab.util.swing.DocumentOutputStream;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Action;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;

import java.awt.Color;

import java.io.PrintStream;

import java.util.ArrayList;
import java.util.logging.Logger;

import bsh.EvalError;
import bsh.TargetError;

/**
 *
 * @author  rogan
 */
public class ScriptedPanel extends javax.swing.JPanel implements ScriptedUI, SwingPluginUI {
    
    private static ColumnDataModel[] NO_COLUMNS = new ColumnDataModel[0];
    private static Action[] NO_ACTIONS = new Action[0];
    private PrintStream _printStream;
    private Scripted _scripted = null;
    private boolean _modified = false;
    private Color _modifiedColor = new Color(255,228,228);
    private Color _unmodifiedColor = new Color(255,255,255);
    
    private Logger _logger = Logger.getLogger(getClass().getName());
    
    /** Creates new form ScriptedPanel */
    public ScriptedPanel(Scripted scripted) {
        initComponents();
        _scripted = scripted;
        _scripted.setUI(this);
        scriptTextPane.setText(_scripted.getScript());
        
        scriptTextPane.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent evt) {
                scriptTextPane.setBackground(_modifiedColor);
                _modified = true;
            }
            public void removeUpdate(DocumentEvent evt) {
                scriptTextPane.setBackground(_modifiedColor);
                _modified = true;
            }
            public void insertUpdate(DocumentEvent evt) {
                scriptTextPane.setBackground(_modifiedColor);
                _modified = true;
            }
        });
        
        DocumentOutputStream dos = new DocumentOutputStream(10240);
        _printStream = new PrintStream(dos);
        outputTextArea.setDocument(dos.getDocument());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        threadTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        delayTextField = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        commitButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.7);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 100));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 100));
        scriptTextPane.setFont(new java.awt.Font("Monospaced", 0, 14));
        scriptTextPane.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPane1.setViewportView(scriptTextPane);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(400, 64));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(400, 64));
        outputTextArea.setBackground(new java.awt.Color(204, 204, 204));
        outputTextArea.setEditable(false);
        outputTextArea.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPane2.setViewportView(outputTextArea);

        jSplitPane1.setRightComponent(jScrollPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Threads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel1, gridBagConstraints);

        threadTextField.setText("4");
        threadTextField.setMinimumSize(new java.awt.Dimension(50, 19));
        threadTextField.setPreferredSize(new java.awt.Dimension(50, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(threadTextField, gridBagConstraints);

        jLabel2.setText("Delay (ms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel2, gridBagConstraints);

        delayTextField.setText("250");
        delayTextField.setMinimumSize(new java.awt.Dimension(50, 19));
        delayTextField.setPreferredSize(new java.awt.Dimension(50, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(delayTextField, gridBagConstraints);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(startButton, gridBagConstraints);

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(stopButton, gridBagConstraints);

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(pauseButton, gridBagConstraints);

        commitButton.setText("Commit");
        commitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel1.add(commitButton, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents
    
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        String action = evt.getActionCommand();
        if (action.equals("Pause")) {
            _scripted.pause();
        } else {
            _scripted.resume();
        }
    }//GEN-LAST:event_pauseButtonActionPerformed
    
    private void commitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitButtonActionPerformed
        try {
            _scripted.setScript(scriptTextPane.getText());
            _modified = false;
            scriptTextPane.setBackground(_unmodifiedColor);
        } catch (EvalError ee) {
            scriptError(ee);
        }
    }//GEN-LAST:event_commitButtonActionPerformed
    
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        _scripted.stopScript();
    }//GEN-LAST:event_stopButtonActionPerformed
    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (_modified) {
            try {
                _scripted.setScript(scriptTextPane.getText());
                _modified = false;
                scriptTextPane.setBackground(_unmodifiedColor);
            } catch (EvalError ee) {
                scriptError(ee);
                return;
            }
        }
        int delay = 0;
        int threads = 4;
        try {
            delay = Integer.parseInt(delayTextField.getText());
        } catch (NumberFormatException nfe) {}
        try {
            threads = Integer.parseInt(threadTextField.getText());
        } catch (NumberFormatException nfe) {}
        _scripted.execute(threads, delay);
    }//GEN-LAST:event_startButtonActionPerformed
    
    public Action[] getConversationActions() {
        return NO_ACTIONS;
    }
    
    public ColumnDataModel[] getConversationColumns() {
        return NO_COLUMNS;
    }
    
    public Action[] getUrlActions() {
        return NO_ACTIONS;
    }
    
    public ColumnDataModel[] getUrlColumns() {
        return NO_COLUMNS;
    }
    
    public PrintStream getErrorStream() {
        return _printStream;
    }
    
    public PrintStream getOutputStream() {
        return _printStream;
    }
    
    public javax.swing.JPanel getPanel() {
        return this;
    }
    
    public String getPluginName() {
        return _scripted.getPluginName();
    }
    
    public void iteration(int i) {
        _logger.info("Script iteration: " + i);
    }
    
    public void scriptError(final EvalError ee) {
        if (SwingUtilities.isEventDispatchThread()) {
            String[] messages = new String[2];
            messages[0] = "Script execution error at line " + ee.getErrorLineNumber() + ": " + ee.getErrorText();
            if (ee instanceof TargetError) {
                messages[1] = ((TargetError)ee).getTarget().toString();
            } else {
                messages[1] = "";
            }
            JOptionPane.showMessageDialog(ScriptedPanel.this, messages, "Script execution error", JOptionPane.ERROR_MESSAGE);
        } else {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    scriptError(ee);
                }
            });
        }
    }
    
    public void scriptStarted() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                startButton.setEnabled(false);
                pauseButton.setText("Pause");
                pauseButton.setEnabled(true);
                stopButton.setEnabled(true);
                scriptTextPane.setEnabled(false);
            }
        });
    }
    
    public void scriptPaused() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                startButton.setEnabled(false);
                pauseButton.setText("Resume");
                stopButton.setEnabled(true);
                scriptTextPane.setEnabled(false);
            }
        });
    }
    
    public void scriptResumed() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                startButton.setEnabled(false);
                pauseButton.setText("Pause");
                stopButton.setEnabled(true);
                scriptTextPane.setEnabled(false);
            }
        });
    }
    
    public void scriptStopped() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                startButton.setEnabled(true);
                pauseButton.setText("Pause");
                pauseButton.setEnabled(false);
                stopButton.setEnabled(false);
                scriptTextPane.setEnabled(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton commitButton;
    private javax.swing.JTextField delayTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton pauseButton;
    private javax.swing.JTextPane scriptTextPane;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextField threadTextField;
    // End of variables declaration//GEN-END:variables
    
}
