import org.owasp.webscarab.model.ConversationID;
import org.owasp.webscarab.model.HttpUrl;
import org.owasp.webscarab.model.Request;
import org.owasp.webscarab.model.Response;

/**
 *  Initialisation code
 */
int _count = 0;

// create a template that contains that basics
Request _request = new Request();
_request.setMethod("GET");
_request.setURL(new HttpUrl("http://localhost:8080/"));
_request.setVersion("HTTP/1.0");
_request.setHeader("User-Agent","WebScarab");

/**
 * Analogous to the hasNext() method of java.util.Iterator
 *
 * return false when you want the script to stop executing
 */
public boolean hasNext() {
    return _count < 10;
}

/**
 * Analogous to the next() method of java.util.Iterator
 *
 * return a Request object that should be executed
 */
public Request next() {
    _count ++;
    // create a new request based on the template
    Request request = new Request(_request);
    // now customise this request object
    request.setHeader("Authorization", "Basic whatever " + _count);
    return request;
}

/**
 * called for every conversation generated by this script, in order to determine
 * whether to keep a permanent record of this conversation in the overall history
 *
 * could also be used to end the script early based on some condition, such as
 * a successful brute force logon
 *
 * return true if you want the conversation to be added to the overall
 * history, and be seen by all of the other plugins. Otherwise return false
 */
public boolean addConversation(Request request, Response response) {
    return true;
}

/**
 * called for EVERY conversation added to the overall history, regardless of origin
 *
 * return false when you want the script to stop executing
 */
public void analyse(ConversationID id, Request request, Response response, String origin) {
    print("Got conversation " + id + " from " + origin);
}

/** 
 * Note that the special function "print" will send its output to the script 
 * output area in the plugin window
 */
