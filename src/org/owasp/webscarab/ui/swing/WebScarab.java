/*
 * WebScarab.java
 *
 * Created on July 13, 2003, 7:11 PM
 */

package org.owasp.webscarab.ui.swing;

import org.owasp.webscarab.backend.FileSystemStore;

import org.owasp.webscarab.model.StoreException;

import org.owasp.webscarab.plugin.Preferences;

import org.owasp.webscarab.plugin.proxy.Proxy;
import org.owasp.webscarab.plugin.proxy.ConnectionHandler;

import org.owasp.webscarab.plugin.spider.Spider;
import org.owasp.webscarab.plugin.manualrequest.ManualRequest;

import org.owasp.webscarab.ui.Framework;
import org.owasp.webscarab.ui.swing.SwingPlugin;

import org.owasp.webscarab.ui.swing.proxy.ProxyPanel;
import org.owasp.webscarab.ui.swing.proxy.ManualEditPanel;
import org.owasp.webscarab.ui.swing.proxy.MiscPanel;
import org.owasp.webscarab.ui.swing.proxy.BeanShellPanel;

import org.owasp.webscarab.ui.swing.spider.SpiderPanel;
import org.owasp.webscarab.ui.swing.manualrequest.ManualRequestPanel;

import org.owasp.webscarab.ui.swing.sessionid.SessionIDPanel;
import org.owasp.webscarab.plugin.sessionid.SessionIDAnalysis;

import org.owasp.webscarab.util.TextFormatter;
import org.owasp.webscarab.util.DocumentHandler;

import java.util.Properties;
import java.util.ArrayList;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.logging.ConsoleHandler;
import java.util.logging.Handler;

import java.lang.Runnable;

import java.io.File;
import java.io.PrintStream;
import java.io.OutputStream;

import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.text.Document;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author  rdawes
 */
public class WebScarab extends javax.swing.JFrame {
    
    private Framework _framework;
    private ArrayList _plugins;
    
    private ProxyConfig _proxyConfig = null;
    private CookieJarViewer _cookieJarViewer = null;
    private SummaryPanel _summaryPanel;
    
    private File _defaultDir = null;
    private Properties _prop = null;
    
    private TranscoderFrame _transcoder = null;
    
    private Logger _logger;
    
    /** Creates new form WebScarab */
    public WebScarab(Framework framework) {
        initComponents();
        
        initLogging();
        
        _framework = framework;
        
        // load the properties
        _prop = Preferences.getPreferences();
        
        _summaryPanel = new SummaryPanel(_framework);
        mainTabbedPane.add(_summaryPanel, "Summary");
        
    }
    
    private void initLogging() {
        _logger = Logger.getLogger("org.owasp.webscarab");
        _logger.setUseParentHandlers(false);
        _logger.setLevel(Level.FINEST);
        Handler ch = new ConsoleHandler();
        ch.setFormatter(new TextFormatter());
        _logger.addHandler(ch);
        
        Document doc = logTextArea.getDocument();
        Handler dh = new DocumentHandler(doc);
        dh.setFormatter(new TextFormatter());
        _logger.addHandler(dh);
        
        doc.addDocumentListener(new DocumentListener() {
            public void removeUpdate(DocumentEvent e) {}
            public void changedUpdate(DocumentEvent e) {
                logTextArea.setCaretPosition(e.getOffset());
            }
            public void insertUpdate(DocumentEvent e) {
                logTextArea.setCaretPosition(e.getOffset() + e.getLength());
            }
        });
    }
    
    public void addPlugin(final SwingPlugin plugin) {
        if (_plugins == null) {
            _plugins = new ArrayList();
        }
        _plugins.add(plugin);
        final JPanel panel = plugin.getPanel();
        if (panel != null) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    mainTabbedPane.add(panel, plugin.getPluginName());
                }
            });
        }
        _summaryPanel.addURLActions(plugin.getURLActions());
        _summaryPanel.addConversationActions(plugin.getConversationActions());
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        mainSplitPane = new javax.swing.JSplitPane();
        mainTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        proxyMenuItem = new javax.swing.JMenuItem();
        cookieJarMenuItem = new javax.swing.JMenuItem();
        transcoderMenuItem = new javax.swing.JMenuItem();
        saveConfigMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("WebScarab");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        mainSplitPane.setBorder(null);
        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainSplitPane.setResizeWeight(1.0);
        mainSplitPane.setContinuousLayout(true);
        mainSplitPane.setAutoscrolls(true);
        mainTabbedPane.setMinimumSize(new java.awt.Dimension(300, 100));
        mainTabbedPane.setPreferredSize(new java.awt.Dimension(1280, 1024));
        mainSplitPane.setLeftComponent(mainTabbedPane);

        jScrollPane1.setToolTipText("Shows messages logged by various WebScarab plugins");
        jScrollPane1.setMinimumSize(new java.awt.Dimension(22, 40));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(3, 64));
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setOpaque(false);
        logTextArea.setBackground(new java.awt.Color(204, 204, 204));
        logTextArea.setEditable(false);
        logTextArea.setToolTipText("Shows messages logged by WebScarab and the plugins");
        jScrollPane1.setViewportView(logTextArea);

        mainSplitPane.setRightComponent(jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(mainSplitPane, gridBagConstraints);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        newMenuItem.setMnemonic('N');
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(newMenuItem);

        openMenuItem.setMnemonic('O');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        exitMenuItem.setMnemonic('X');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        toolsMenu.setMnemonic('T');
        toolsMenu.setText("Tools");
        proxyMenuItem.setText("Proxies");
        proxyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyMenuItemActionPerformed(evt);
            }
        });

        toolsMenu.add(proxyMenuItem);

        cookieJarMenuItem.setText("Shared Cookies");
        cookieJarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cookieJarMenuItemActionPerformed(evt);
            }
        });

        toolsMenu.add(cookieJarMenuItem);

        transcoderMenuItem.setText("Transcoder");
        transcoderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcoderMenuItemActionPerformed(evt);
            }
        });

        toolsMenu.add(transcoderMenuItem);

        saveConfigMenuItem.setText("Save Configuration");
        saveConfigMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigMenuItemActionPerformed(evt);
            }
        });

        toolsMenu.add(saveConfigMenuItem);

        mainMenuBar.add(toolsMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");
        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }//GEN-END:initComponents

    private void transcoderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcoderMenuItemActionPerformed
        if (_transcoder == null) {
            _transcoder = new TranscoderFrame();
        }
        _transcoder.show();
    }//GEN-LAST:event_transcoderMenuItemActionPerformed

    private void cookieJarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cookieJarMenuItemActionPerformed
        if (_cookieJarViewer == null) {
            _cookieJarViewer = new CookieJarViewer(_framework.getCookieJar());
        }
        _cookieJarViewer.show();
    }//GEN-LAST:event_cookieJarMenuItemActionPerformed
    
    private void saveConfigMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigMenuItemActionPerformed
        try {
            Preferences.savePreferences();
        } catch (Exception e) {
            System.out.println("Error writing preferences : " + e);
        }
    }//GEN-LAST:event_saveConfigMenuItemActionPerformed
    
    private void proxyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyMenuItemActionPerformed
        new ProxyConfig(this, true, _prop).show();
        System.out.println("ProxyConfig has returned");
        _framework.setProxies(_prop);
    }//GEN-LAST:event_proxyMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        saveSessionData();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser jfc = new JFileChooser(_defaultDir);
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setDialogTitle("Choose a directory that contains a previous session");
        int returnVal = jfc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            String dir = file.toString() + System.getProperty("file.separator");
            if (loadSession(dir)) {
                _defaultDir = jfc.getCurrentDirectory();
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    public boolean loadSession(String location) {
        saveSessionData();
        try {
            if (FileSystemStore.isExistingSession(location)) {
                FileSystemStore store = new FileSystemStore(location);
                _framework.setSessionStore(store);
                return true;
            } else {
                int choice = JOptionPane.showConfirmDialog(null, location + " does not contain a session. Do you want to create one?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    return createSession(location);
                }
            }
        } catch (StoreException se) {
            JOptionPane.showMessageDialog(null, new String[] {"Error loading Session : ", se.toString()}, "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }
    
    public boolean createSession(String location) {
        saveSessionData();
        try {
            if (FileSystemStore.isExistingSession(location)) {
                int choice = JOptionPane.showConfirmDialog(null, location + " already contains a session. Do you want to open it?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    return loadSession(location);
                }
            } else {
                FileSystemStore store = new FileSystemStore(location);
                store.init();
                _framework.setSessionStore(store);
                return true;
            }
        } catch (StoreException se) {
            JOptionPane.showMessageDialog(null, new String[] {"Error creating Session : ", se.toString()}, "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }
    
    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        JFileChooser jfc = new JFileChooser(_defaultDir);
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setDialogTitle("Select a directory to write the session into");
        int returnVal = jfc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            String dir = file.toString() + System.getProperty("file.separator");
            if (createSession(dir)) {
                _defaultDir = jfc.getCurrentDirectory();
            }
        }
    }//GEN-LAST:event_newMenuItemActionPerformed
    
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // FIXME
        String[] message = new String[] {
            "OWASP WebScarab - part of the Open Web Application Security Project",
            "See http://www.owasp.org/",
            "", "Primary Coders : ",
            "         Rogan Dawes (rogan at dawes.za.net)",
            "         Ingo Struck (ingo at ingostruck.de)"
        };
        JOptionPane.showMessageDialog(this, message, "About WebScarab", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        saveSessionData();
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    private void saveSessionData() {
        try {
            _framework.saveSessionData();
        } catch (StoreException se) {
            // pop up an alert dialog box or something
            System.err.println("Error saving session : " + se);
        }
    }
    
    private void savePreferences() {
        try {
            Preferences.savePreferences();
        } catch (Exception e) {
            System.err.println("Could not write to prefs file : " + e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Framework framework = new Framework();
        
        WebScarab ws = new WebScarab(framework);
        ws.show();
        
        ws.addPlugin(new ProxyPanel(framework));
        ws.addPlugin(new SpiderPanel(framework));
        ws.addPlugin(new ManualRequestPanel(framework));
        ws.addPlugin(new SessionIDPanel(framework));
        
        boolean loaded = false;
        if (args != null && args.length == 1 && !args[0].equals("")) {
            loaded = ws.loadSession(args[0]);
        } else {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jfc.setDialogTitle("Select a directory to write the session into");
            int returnVal = jfc.showOpenDialog(ws);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = jfc.getSelectedFile();
                String dir = file.toString() + System.getProperty("file.separator");
                if (FileSystemStore.isExistingSession(dir)) {
                    loaded = ws.loadSession(dir);
                } else {
                    loaded = ws.createSession(dir);
                }
            }
        }
        if (!loaded) {
            JOptionPane.showMessageDialog(null, "Conversations and other data will not be saved unless you create or open a session", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem cookieJarMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem proxyMenuItem;
    private javax.swing.JMenuItem saveConfigMenuItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem transcoderMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
