/*
 * HexEditor.java
 *
 * Created on November 4, 2003, 8:23 AM
 */

package org.owasp.webscarab.ui.swing.editors;

import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.Event;
import javax.swing.event.DocumentListener;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.Keymap;
import java.awt.Container;
import javax.swing.JFrame;
import javax.swing.JEditorPane;
import java.net.URL;

/**
 *
 * @author  rdawes
 */
public class HTMLPanel extends javax.swing.JPanel implements ByteArrayEditor {
    
    private boolean _editable = false;
    // we assume it is modified - we need to add a keystroke listener to do this properly
    private boolean _modified = false;
    
    private byte[] _data = new byte[0];
    
    private SearchDialog _searchDialog = null;
    
    /** Creates new form HexEditor */
    public HTMLPanel() {
        initComponents();
        
        // a special editor kit that overrides all elements that would lead to loading from the server
        // e.g. frames, images, applets, objects, etc. This is because we don't know what the right
        // base URL is, and we don't actually want to reload the pages anyway.
        // if there are tags that still cause requests to the server, override them in MyHTMLEditorKit
        htmlEditorPane.setEditorKit(new MyHTMLEditorKit());
        
        Keymap keymap = htmlEditorPane.addKeymap("MySearchBindings",
        htmlEditorPane.getKeymap());
        //Ctrl-f to open the search dialog
        keymap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_F, Event.CTRL_MASK), new AbstractAction() {
            public void actionPerformed(ActionEvent event) {
                if (_searchDialog == null) {
                    Container c = htmlScrollPane;
                    while (! (c instanceof JFrame) && c.getParent() != null) {
                        c = c.getParent();
                    }
                    if (c instanceof JFrame) {
                        _searchDialog = new SearchDialog((JFrame) c, false);
                        _searchDialog.setSearchTextComponent(htmlEditorPane);
                    } else {
                        System.err.println("No JFrame parent found!");
                        return;
                    }
                }
                _searchDialog.show();
            }
        });
        keymap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_G, Event.CTRL_MASK), new AbstractAction() {
            public void actionPerformed(ActionEvent event) {
                if (_searchDialog != null) {
                    _searchDialog.doSearch();
                }
            }
        });
                
        htmlEditorPane.setKeymap(keymap);
        htmlEditorPane.addHyperlinkListener(new HTMLPanel.LinkToolTipListener());
    }
    
    public String getName() {
        return "HTML";
    }
    
    public String[] getContentTypes() {
        return new String[] { "text/html.*" };
    }
    
    public void setEditable(boolean editable) {
        htmlEditorPane.setEditable(false);
        // We can't edit HTML directly. This panel is just a renderer
        // _editable = editable;
        // htmlEditorPane.setEditable(editable);
        // we could do things like make buttons visible and invisible here
    }
    
    public void setBytes(byte[] bytes) {
        htmlEditorPane.setEditable(false);
        htmlEditorPane.getDocument().putProperty("base","");
        if (bytes != null) {
            // FIXME: may need to reset style sheets, etc here. Not sure how to do that, though
            // htmlEditorPane.setDocument(new HTMLEditorKit().createDefaultDocument());
            htmlEditorPane.setContentType("text/html");
            htmlEditorPane.putClientProperty("IgnoreCharsetDirective", Boolean.TRUE);
            htmlEditorPane.getDocument().putProperty("IgnoreCharsetDirective", Boolean.TRUE);
            try {
                htmlEditorPane.setText(new String(bytes));
            } catch (Exception e) {
                System.err.println("Exception setting HTML text : " + e);
            }
        } else {
            htmlEditorPane.setText("");
        }
        htmlEditorPane.setCaretPosition(0);
        // always set _modified false AFTER setting the text, since the Document listener
        // will set it to true when adding the text
        _modified = false;
    }
    
    public boolean isModified() {
        return _editable && _modified;
    }
    
    public byte[] getBytes() {
        return htmlEditorPane.getText().getBytes();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        htmlScrollPane = new javax.swing.JScrollPane();
        htmlEditorPane = new javax.swing.JEditorPane();

        setLayout(new java.awt.GridBagLayout());

        htmlScrollPane.setViewportView(htmlEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(htmlScrollPane, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane htmlScrollPane;
    private javax.swing.JEditorPane htmlEditorPane;
    // End of variables declaration//GEN-END:variables
    
    
    public static void main(String[] args) {
        byte[] content = new byte[0];
        try {
            java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
            // FileInputStream fis = new FileInputStream("/usr/share/xfce/backdrops/Flower.jpg");
            /*
             java.io.FileInputStream fis = new java.io.FileInputStream("/home/rdawes/exodus/HowTo.html");
            byte[] buff = new byte[1024];
            int got = 0;
            while ((got = fis.read(buff)) > 0) {
                baos.write(buff, 0, got);
            }
            content = baos.toByteArray();
             */
            String filename = "c:/temp/reverse/conversations/1-response";
            if (args.length == 1) {
                filename = args[0];
            }
            java.io.FileInputStream fis = new java.io.FileInputStream(filename);
            org.owasp.webscarab.model.Response response = new org.owasp.webscarab.model.Response();
            response.read(fis);
            content = response.getContent();
            
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        
        javax.swing.JFrame top = new javax.swing.JFrame("HTML Panel");
        top.getContentPane().setLayout(new java.awt.BorderLayout());
        top.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                System.exit(0);
            }
        });
        
        javax.swing.JButton button = new javax.swing.JButton("GET");
        final HTMLPanel hp = new HTMLPanel();
        top.getContentPane().add(hp);
        top.getContentPane().add(button, java.awt.BorderLayout.SOUTH);
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.out.println(new String(hp.getBytes()));
            }
        });
        top.setBounds(100,100,600,400);
        top.show();
        try {
            hp.setEditable(false);
            hp.setBytes(content);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public class LinkToolTipListener implements HyperlinkListener {
        public LinkToolTipListener() {
        }
        public void hyperlinkUpdate(HyperlinkEvent he) {
            HyperlinkEvent.EventType type = he.getEventType();
            if (type == HyperlinkEvent.EventType.ENTERED) {
                JEditorPane jep = (JEditorPane) he.getSource();
                URL url = he.getURL();
                if (url != null) {
                    jep.setToolTipText(url.toString());
                } else {
                    jep.setToolTipText(he.getDescription());
                }
            } else if (type == HyperlinkEvent.EventType.EXITED) {
                JEditorPane jep = (JEditorPane) he.getSource();
                jep.setToolTipText("");
            }
        }
    }
}

