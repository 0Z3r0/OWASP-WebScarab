/*
 * ConversationFrame.java
 *
 * Created on 27 December 2004, 12:11
 */

package org.owasp.webscarab.ui.swing;

import org.owasp.webscarab.model.FrameworkModel;
import org.owasp.webscarab.model.ConversationID;
import org.owasp.webscarab.model.ConversationModel;
import org.owasp.webscarab.model.ConversationListener;
import org.owasp.webscarab.model.Preferences;
import org.owasp.webscarab.model.Request;
import org.owasp.webscarab.model.Response;

import org.owasp.webscarab.plugin.AbstractPluginModel;

import org.owasp.webscarab.util.swing.ListComboBoxModel;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.BorderLayout;

import java.util.logging.Logger;

/**
 *
 * @author  rogan
 */
public class ConversationFrame extends javax.swing.JFrame {
    
    private ConversationPanel _conversationPanel;
    private ConversationModel _conversations;
    
    private static Dimension _preferredSize = null;
    private static Point _preferredLocation = null;
    
    private Logger _logger = Logger.getLogger(getClass().getName());
    
    private ConversationID _selected = null;
    
    /** Creates new form ConversationFrame */
    public ConversationFrame(ConversationModel conversations) {
        _conversations = conversations;
        
        initComponents();
        
        _conversationPanel = new ConversationPanel();
        getContentPane().add(_conversationPanel, BorderLayout.CENTER);
        
        ConversationListModel clm = new ConversationListModel(conversations);
        conversationComboBox.setModel(new ListComboBoxModel(clm));
        conversationComboBox.setRenderer(new ConversationRenderer(conversations));
        resizeFrame();
    }
    
    public void setSelectedConversation(ConversationID id) {
        _selected = id;
        conversationComboBox.setSelectedItem(_selected);
    }
    
    private void resizeFrame() {
        if (_preferredSize == null) {
            try {
                int width = Integer.parseInt(Preferences.getPreference("ConversationFrame.width","600"));
                int height = Integer.parseInt(Preferences.getPreference("ConversationFrame.height","500"));
                _preferredSize = new Dimension(width, height);
            } catch (NumberFormatException nfe) {
                _logger.warning("Error parsing ConversationPanel dimensions: " + nfe);
            } catch (NullPointerException npe) {
            }
        }
        if (_preferredLocation == null) {
            try {
                String value = Preferences.getPreference("ConversationFrame.x");
                if (value != null) {
                    int x = Integer.parseInt(value);
                    value = Preferences.getPreference("ConversationFrame.y");
                    int y = Integer.parseInt(value);
                    _preferredLocation = new Point(x,y);
                }
            } catch (NumberFormatException nfe) {
                _logger.warning("Error parsing ConversationFrame location: " + nfe);
            } catch (NullPointerException npe) {
            }
        }
        if (_preferredLocation != null) setLocation(_preferredLocation);
        if (_preferredSize != null) {
            setSize(_preferredSize);
        }
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                if (!isVisible()) return;
                _preferredLocation = getLocation();
                Preferences.setPreference("ConversationFrame.x", Integer.toString(_preferredLocation.x));
                Preferences.setPreference("ConversationFrame.y", Integer.toString(_preferredLocation.y));
            }
            public void componentResized(java.awt.event.ComponentEvent evt) {
                if (!isVisible()) return;
                _preferredSize = getSize();
                Preferences.setPreference("ConversationFrame.width", Integer.toString(_preferredSize.width));
                Preferences.setPreference("ConversationFrame.height", Integer.toString(_preferredSize.height));
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jToolBar1 = new javax.swing.JToolBar();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        conversationComboBox = new javax.swing.JComboBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jToolBar1.setFloatable(false);
        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(previousButton);

        nextButton.setText("Next");
        nextButton.setMaximumSize(new java.awt.Dimension(65, 27));
        nextButton.setMinimumSize(new java.awt.Dimension(65, 27));
        nextButton.setPreferredSize(new java.awt.Dimension(65, 27));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(nextButton);

        conversationComboBox.setMaximumSize(new java.awt.Dimension(600, 32767));
        conversationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conversationComboBoxActionPerformed(evt);
            }
        });

        jToolBar1.add(conversationComboBox);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-700)/2, 800, 700);
    }//GEN-END:initComponents
    
    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        int index = conversationComboBox.getSelectedIndex();
        if (index>0)
            conversationComboBox.setSelectedIndex(index-1);
    }//GEN-LAST:event_previousButtonActionPerformed
    
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        int index = conversationComboBox.getSelectedIndex();
        if (index+1<conversationComboBox.getModel().getSize())
            conversationComboBox.setSelectedIndex(index+1);
    }//GEN-LAST:event_nextButtonActionPerformed
    
    private void conversationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conversationComboBoxActionPerformed
        ConversationID id = (ConversationID) conversationComboBox.getSelectedItem();
        if (id == null) {
            _conversationPanel.setRequest(null, false);
            _conversationPanel.setResponse(null, false);
            setTitle("WebScarab - no conversation selected");
        } else {
            Request request = _conversations.getRequest(id);
            Response response = _conversations.getResponse(id);
            _conversationPanel.setRequest(request, false);
            _conversationPanel.setResponse(response, false);
            setTitle("WebScarab - conversation " + id);
        }
    }//GEN-LAST:event_conversationComboBoxActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        dispose();
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            final FrameworkModel model = new FrameworkModel();
            model.setSession("FileSystem",new java.io.File("/tmp/l/1"),"");
            ConversationFrame cf = new ConversationFrame(model.getConversationModel());
            cf.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    System.exit(0);
                }
            });
            
            cf.show();
            cf.setSelectedConversation(new ConversationID(1));
        } catch (org.owasp.webscarab.model.StoreException se) {
            se.printStackTrace();
            System.exit(0);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox conversationComboBox;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    // End of variables declaration//GEN-END:variables
    
}
